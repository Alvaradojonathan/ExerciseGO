@model ExerciseGO.Models.Video

@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div>
    <h4>Video</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.VideoLink)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.VideoLink)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.VideoName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.VideoName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.IsWatch)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.IsWatch)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.IsBonus)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.IsBonus)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.VideoStart)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.VideoStart)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.VideoEnd)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.VideoEnd)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Game.UserName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Game.UserName)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.TargetArea.TargetAreaName)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.TargetArea.TargetAreaName)
        </dd>

    </dl>
</div>
<!-- 1. The <iframe> (and video player) will replace this <div> tag. -->
    <div id="player"></div>

    <script>
      // 2. This code loads the IFrame Player API code asynchronously.
      var tag = document.createElement('script');

      tag.src = "https://www.youtube.com/iframe_api";
      var firstScriptTag = document.getElementsByTagName('script')[0];
      firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

      // 3. This function creates an <iframe> (and YouTube player)
      //    after the API code downloads.
      var player;
      function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
          height: '390',
          width: '640',
          videoId: 'f3gMJ0HEp-U',
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
      }

      // 4. The API will call this function when the video player is ready.
      function onPlayerReady(event) {
        event.target.playVideo();
      }

      // 5. The API calls this function when the player's state changes.
      //    The function indicates that when playing a video (state=1),
      //    the player should play for six seconds and then stop.
      var done = false;
      function onPlayerStateChange(event) {
        if (event.data == YT.PlayerState.PLAYING && !done) {
          setTimeout(stopVideo, 70000);
          done = true;
        }
      }
      function stopVideo() {
        player.stopVideo();
      }
    </script>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.VideoID }) |
    @Html.ActionLink("Back to List", "Index")
</p>
